import pygame


pygame.init()
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("OOP Platformer Base Code")
punch_arm = False
clock = pygame.time.Clock()
GRAVITY = 0.5


# Colors
WHITE = (255, 255, 255)
BLUE = (0, 100, 255)
GREEN = (0, 200, 0)
RED = (235, 64, 52)
LIGHT_BLUE = (55, 234, 240)
BLACK = (0,0,0)

def is_colliding(ax, ay, aw, ah, bx, by, bw, bh):
    return (
        ax < bx + bw and
        ax + aw > bx and
        ay < by + bh and
        ay + ah > by
    )

#-class enemy-------------------------------------------------------------------------------------------------


#-class platform----------------------------------------------------------------------------------------------
class Platform:
    
    def __init__(self, x, y, w, h): #constructor
        self.x = x
        self.y = y
        self.w = w
        self.h = h

    def draw(self, surface): #draw function
        pygame.draw.rect(surface, GREEN, (self.x, self.y, self.w, self.h))
        

#-class player----------------------------------------------------------------------------------------------
class Player:
    global punch_arm
    
    def __init__(self, x, y): #constructor
        self.x = x
        self.y = y
        self.w = 40
        self.h = 60
        self.vy = 0
        self.on_ground = False
        self.facing = "right"

    def handle_input(self, keys): #keyboard input
        if keys[pygame.K_RIGHT]:
            self.x += 5
        if keys[pygame.K_LEFT]:
            self.x += -5
        if keys[pygame.K_UP] and self.on_ground:
            self.vy = -12
            self.on_ground = False
        if keys[pygame.K_DOWN] and self.on_ground:
            self.y += 5
            self.on_ground = False
        if keys[pygame.K_f]:
            punch_arm = True #boolean value to check if user has pressed z
        else:
            punch_arm = False
       
            

    def apply_gravity(self): #make player fall
        self.vy += GRAVITY
        self.y += self.vy

    
    def check_collision(self, platforms): 
        self.on_ground = False #assume we're in the air, change if not
        for plat in platforms: #check all the platforms in the list
            if self.is_colliding(plat): #if we ARE colliding, reset feet to top of platform...
                if self.y + self.h <= plat.y + self.vy:
                    self.y = plat.y - self.h
                    self.vy = 0
                    self.on_ground = True

    def is_colliding(self, plat): #bounding box collision
        if self.x + self.w > plat.x and self.x < plat.x + plat.w and self.y + self.h > plat.y and self.y < plat.y + plat.h:
            return True
        else:
            return False
        

    def update(self, platforms): #funtion that calls a bunch of other functions (keeps game loop more simple)
        self.apply_gravity()
        self.check_collision(platforms)

    def draw(self, surface):
        pygame.draw.rect(surface, BLACK, (self.x, self.y, self.w, self.h))
        
                                        
#end of classes----------------------------------------------------------------------------------------------

#list to contain platforms
platforms = [
    Platform(0, 550, 1000, 20), #calling platform class constructor
    Platform(0, 420, 1000, 20),

    
    
]

p1 = Player(100, 100) #calling player class constructor
p2 = Player(700, 100)
running = True
while running: #GAME LOOP############################################################################
    
    #input section-------------------
    clock.tick(60)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()
    p1.handle_input(keys)
    
    #update/physics section-----------
    p1.update(platforms)
    
    if punch_arm == True:
        if p1.facing == "right":
            p1.armx = p1.x + p1.width #if facing right, draw arm to the right
        else:
            p1.armx = p1.x - 20 #otherwise draw it facing to the left        
        p1.army = p1.y + p1.height // 2 - 10 #set "arm's" height to the middle of the player (adjust based on sprite image)
       
        #check collision with player 2
        if is_colliding(p1.armx, p1.army, 20, 20, p2.x, p2.y, p2.width, p2.height):
            if p1.facing == "right":
                p2.velx = 10 # if hit from the left, move backwards 10 pixels
            else:
                p2.velx = -10 # if hit from behind, move forwards 10 pixels
    

    #render section-------------------
    screen.fill(LIGHT_BLUE)
    
    if punch_arm:
        pygame.draw.rect(screen, BLACK, (p1.armx, p1.army, 20, 20)) #draw "arm"


    
    for plat in platforms:
        plat.draw(screen)

    p1.draw(screen)
    
    
    p2.draw(screen)
    
    pygame.display.flip()
    
#END OF GAME LOOP############################################################################

pygame.quit()
